// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        angle: 
          displayName: '角度'
          value: 45.0
        offset:
          displayName: '偏移'
          value: 0.0
        uvRatio:
          displayName: '比例'
          value: 1.0
        beginColor: 
          inspector: { type: color }
          displayName: '起始颜色'
          value: [0, 0.5, 1, 1]
        endColor: 
          inspector: { type: color }
          displayName: '结束颜色'
          value: [1, 0, 0, 1]
    
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  uniform COLOR_FRAG { 
    vec4 beginColor;
    vec4 endColor;
    float angle;
    float offset;
    float uvRatio;
}

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
    o *= texture(texture, v_uv0);
      #if CC_USE_ALPHA_ATLAS_TEXTURE
      o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;
      #endif
    #endif

    o *= v_color;

    float angleInRadians = radians(angle); 
      float ratio = clamp((v_uv0.y * cos(angleInRadians) + v_uv0.x * sin(angleInRadians) + offset) * uvRatio, 0.0, 1.0);
    float beginRatio = 1.0 - ratio;
      float endRatio = ratio;

    ALPHA_TEST(o);

    gl_FragColor = vec4(
          o.r * (beginColor.r * beginRatio + endColor.r * endRatio),
          o.g * (beginColor.g * beginRatio + endColor.g * endRatio),
          o.b * (beginColor.b * beginRatio + endColor.b * endRatio),
          o.a * (beginColor.a * beginRatio + endColor.a * endRatio)
      );
  }
}%
