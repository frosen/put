// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        u_edge:
          displayName: '范围0~0.5'
          value: 0.5
        edge_blur: 
          displayName: '边缘羽化(0.01~0.1)'
          value: 0.01   
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  uniform CORNER_FRAG { 
    float u_edge;
    float edge_blur;
  }

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
    o *= texture(texture, v_uv0);
      #if CC_USE_ALPHA_ATLAS_TEXTURE
      o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;
      #endif
    #endif

    o *= v_color;

    ALPHA_TEST(o);

    float edge = u_edge;
    float dis = 0.0;

    vec2 uv = v_uv0;
         
    if (uv.x < edge) {
      #if LEFT_TOP
      if (uv.y < edge) dis = distance(uv, vec2(edge, edge));
      #endif
      #if LEFT_BOTTOM
      if (uv.y > 1.0 - edge) dis = distance(uv, vec2(edge, 1.0 - edge));
      #endif
      
    } else if (uv.x > 1.0 - edge) {
      #if RIGHT_TOP
      if (uv.y < edge) dis = distance(uv, vec2(1.0 - edge, edge));
      #endif
      #if RIGHT_BOTTOM
      if (uv.y > 1.0 - edge) dis = distance(uv, vec2(1.0 - edge, 1.0 - edge));
      #endif
    }

    float gap = edge * edge_blur;
    if (dis > 0.001) {
      if(dis <= edge) {
        // 平滑过渡: ret smoothstep(a, b, x) 可以用来生成0到1的平滑过渡.
        o.a *= smoothstep(0.0, gap, edge - dis);;
      } else {
        // 隐藏不要的部分
        o.a = 0.0; 
      }
    }

    gl_FragColor = o;
  }
}%
